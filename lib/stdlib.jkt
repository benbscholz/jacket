;; jacket standard library

(define (foldr f init l)
	(if (empty? l)
		init
		(f (first l) (foldr f init (rest l)))))
		
(define (foldl f init l)
	(if (empty? l)
		init
		(foldl f (f init (first l)) (rest l))))

(define fold foldl)
(define reduce fold)

(define (map f l)
  (foldr (lambda (v l) (cons (f v) l)) empty l))
  
(define (filter f l)
  (foldr (lambda (v l)
           (cond
             ((not (f v)) l)
             (else (cons v l)))) empty l))
             
(define (flip f)
	(x y) (f y x))
             
(define append 
	(lambda (x y)
		(foldr cons y x)))
             
(define (reverse l)
	(foldl (flip cons) empty l))

(define (count l)
	(cond
		((empty? l) 0)
		(else (add1 (count (rest l))))))
		
(define (member m l)
	(cond 
		((empty? l) false)
		((eq? m (first l)) true)
		(else (member m (rest l)))))
	
(define (take l n)
	(cond
		((zero? n) empty)
		(else  (cond
					((empty? l) empty)
					(else (cons (first l) (take (rest l) (sub1 n))))))))
					
(define (drop l n) 
	(take (reverse l) n))




